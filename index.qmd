---
title: "Introduction to python"
author: "Luigi Cesarini"
date:  "2023-10-12"
institute: "IUSS Pavia"

format:
  revealjs:
    logo: Logo_iuss_pale_tb.png
    footer: "Hydrological Risk 2023/2024"
    css: style.css
editor: visual
---

## What is python? {.smaller}

![](https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Python-logo-notext.svg/1280px-Python-logo-notext.svg.png){width="457px" fig-align="right"}

Python is a high-level, **interpreted**, and **dynamically-typed** programming language known for its simplicity and readability.

**Interpreted**: Python code is not compiled into machine code; instead, it is executed line by line by the Python interpreter.

**Dynamically Typed**: meaning you don't need to specify variable types explicitly. And of course, is open source!

## Possible Application

::: columns
::: {.column width="50%"}
[Web and Internet Development]{style="color:red;font-weight:700;"}

Django and Flask

<br>

[Scientific and numeric]{style="color:green;font-weight:700;"}

Scipy, Pandas
:::

::: {.column width="50%"}
[Machine learning]{style="color:orange;font-weight:700;"}

Pytorch, Tensorflow

<br>

[GUIs]{style="color:dodgerblue;font-weight:700;"}

tkinter,streamlit
:::
:::

## Basic Syntax {.smaller}

Python uses indentation to indicate a block of code.

In python you can assign values to a variable with =

The hash (i.e., #) is used to comment lines of code

Numbering start at 0.

::: columns
::: {.column width="50%"}
**Arithmetic Operators**

+-\*/\
\*\*

\% \\\\

NA Inf -Inf Nan
:::

::: {.column width="50%"}
**Logical Operator**

-   & (and)

-   \| (or)

-   \~ /not (not)

-   ==

-   !=

-   \>=;\<=
:::
:::

## Data types

Variables can store data of different types, and different types can do different things.

Python has some built-in data types

> Text Type: str\
> Numeric Types: int, float, complex\
> Boolean Type: bool

```{python}
#| echo: true

print(type(5),type("5"),type(True))
```

## Data structure (1) {.smaller}

-   **Tuples**

Tuples are used to store multiple items in a single variable.

A tuple is a collection which is ordered and unchangeable. A tuple can contain different data types:

Tuples are written with round brackets, and allow duplicates.

```{python}
#| echo: true
x = ("apple", "banana", "cherry")
print(len(x),x)
```

## Data structure (2) {.smaller}

-   **List**

Lists are created using square brackets and are used to store multiple items in a single variable. List items are ordered, changeable, and allow duplicate values.

```{python}
#| echo: true
x = ["apple", "banana", 5]
print(x)
x[2]="cherry"
print(x)
```

## Data structure (3) {.smaller}

-   **Dictionaries**

Dictionaries are written with curly brackets, and have keys and values.

Dictionary items are ordered, changeable, and does not allow duplicates.

Dictionary items are presented in key:value pairs, and can be referred to by using the key name.

```{python}
#| echo: true
x = {"fruit":"banana","color":"red"}
print(len(x))
print(x["fruit"])
```

## Indexing {.smaller}

In Python, indexing is the process of accessing individual elements within a data structure, such as a list, string, tuple, or other sequence-like objects. Python uses zero-based indexing. To access an element, you use square brackets.

-   Negative indexing -1 last element, -2 secodn to last etc.

-   Slicing: allows you to extract a portion of a sequence using a range of indices. It is denoted as start:stop:step, where start is the starting index (inclusive), stop is the stopping index (exclusive), and step is the increment.

```{python}
#| echo: true
x=[2,3,5,1,1,1,1,True,"Ciao"]
print(x[-1])
print(x[2:5])
print(x[1:9:2])
```

## Functions {.smaller}

A function is a reusable block of code that performs a specific task or a set of tasks. Writing functions allow you to encapsulate a sequence of statements and give it a name, making it easier to manage and reuse in your code

```{python}
#| echo: true
#| eval: false
def my_function():
    # Function code goes here
    return
```

`return` allows the function to produce a result that can be used elsewhere in your code.

```{python}
#| echo: true
def add(a, b):
    """
    This function adds two numbers and returns the result.

    Parameters:
    a (int): The first number.
    b (int): The second number.

    Returns:
    int: The sum of a and b.
    """
    return a + b

```

## Control Statements (1) {.smaller}

**If Statements**

It allows you to execute a block of code only if a specified condition is true

```{python}
#| echo: true
#| eval: false

if condition:
    # Code to execute if the condition is true

```

You can also use "else if" to handle multiple conditions within the same conditional statement

```{python}
#| echo: true

x = 10

if x > 10:
    print("x is greater than 10")
elif x == 10:
    print("x is equal to 10")
else:
    print("x is less than 10")

```

## Control Statements (2) {.smaller}

**While Loop**

Allows you to repeatedly execute a block of code as long as a specified condition remains true

```{python}
#| echo: true
#| eval: false

while condition:
    # Code to execute while the condition is true

```

Here's an example

```{python}
#| echo: true

count = 1

while count <= 5:
    print(count)
    count += 1


```

## Control Statements (3) {.smaller}

**For Loops**

It is usually used for iterating over a sequence (such as a list, tuple, string, or range) or other iterable objects. It allows you to execute a block of code a specific number of times, once for each item in the sequence.

```{python}
#| echo: true
#| eval: false

for item in sequence:
    # Code to execute for each item in the sequence


```

Here's an example

```{python}
#| echo: true

for letter in "Hydrological Risk":
  if letter != "l":
    print(letter)
```

## Reading from external sources {.smaller}

Using the `open()` function we can open the file.

"r" - Read - Default value. Opens a file for reading, error if the file does not exist

"a" - Append - Opens a file for appending, creates the file if it does not exist

"w" - Write - Opens a file for writing, creates the file if it does not exist

"x" - Create - Creates the specified file, returns an error if the file exists

**Reading Files**

```{python}
#| echo: true

f = open("/Users/lcesarini/repo/Hydro_Risk_2023/data/AB_NYC_2019.csv","r")

print(f.readline())
print(f.readline())
print(f.readline())
print(f.readline())

```

## Write to external sources {.smaller}

**Writing to Files**

```{python}
#| echo: true

f = open("/Users/lcesarini/repo/Hydro_Risk_2023/data/something.txt", "a")
f.write("We wrote something in a file\n")
f.close()

#open and read the file after the appending:
f = open("/Users/lcesarini/repo/Hydro_Risk_2023/data/something.txt", "r")
print(f.read())
```

## Contacts

email: [luigi.cesarini\@iusspavia.it](luigi.cesarini@iusspavia.it)
